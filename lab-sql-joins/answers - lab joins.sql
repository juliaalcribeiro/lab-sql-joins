USE sakila;

#1. List the number of films per category.

SELECT category_id, COUNT(*)
FROM film AS f
JOIN film_category AS fc
ON f.film_id = fc.film_id
GROUP BY category_id;

#2. Retrieve the store ID, city, and country for each store.

SELECT 
    s.store_id,
    ci.city,
    co.country
FROM store AS s
JOIN address AS a
ON s.address_id = a.address_id
JOIN city AS ci
ON a.city_id = ci.city_id
JOIN country AS co
ON ci.country_id = co.country_id;

#3. Calculate the total revenue generated by each store in dollars.

SELECT 
	SUM(p.amount),
    c.store_id
FROM payment AS p
JOIN customer AS c
ON p.customer_id = c.customer_id
GROUP BY c.store_id;

#4. Determine the average running time of films for each category.

SELECT 
	fc.category_id,
	AVG(f.length)
FROM film AS f
JOIN film_category AS fc
ON fc.film_id = f.film_id
GROUP BY fc.category_id;

#5. Identify the film categories with the longest average running time.

SELECT 
	fc.category_id,
	AVG(f.length)
FROM film AS f
JOIN film_category AS fc
ON fc.film_id = f.film_id
GROUP BY fc.category_id
ORDER BY AVG(f.length) DESC
LIMIT 1;

#6. Display the top 10 most frequently rented movies in descending order.

SELECT 
	f.title,
    COUNT(r.inventory_id) AS number_rents
FROM film AS f
JOIN inventory AS i
ON f.film_id = i.film_id
JOIN rental AS r
ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY COUNT(f.title) DESC
LIMIT 10;

#7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT 
	f.title,
    i.store_id
FROM film AS f
JOIN inventory AS i
ON f.film_id = i.film_id
WHERE f.title LIKE "Academy Dinosaur";

#Yes, it can, it returns four rows with positive inventory for Academy Dinasour in store 1.
    